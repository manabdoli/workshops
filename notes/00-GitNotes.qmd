---
title: "Git Notes"
author: "Mansour Abdoli, PhD"
date: "January 2025"
subtitle: "`r Sys.time()`"
#update: "last updated `r format(Sys.Date(), '%B %d, %Y')`"
format: html
---

```{r}
knitr::opts_chunk$set(eval = FALSE)
```

## Cloning

To clone a repository from Github.com, first copy the project's SSH address (here, ) git\@github.com:manabdoli/workshops.git), then choose one of the two ways:

1.  Create a New Project and choose Version Control, Git, and paste the SSH address in the repository URL.
2.  Clone the repository into your projects folder using the following command line:

```{sh}         
git clone git@github.com:manabdoli/workshops.git
```

You can open the folder as a new project, which adds a .Rproj file to the folder.

3.  Create a new project using `use_this` package\[\^1\] and sync it later with an existing Git repository.

```{r}
usethis::create_project("path/to/your/project")
```

-   To complete this process, you need to customize the `DESCRIPTION` file.

-   `use_this` can also be used to initialize a local Git repository:

```{r}
usethis::use_git() # initializes the local git
```

## Setting an R Package Environment

To make the new project into a package, you may need to complete some of the following steps[^1]:

[^1]: Codes generated by MS Copilot.

```{r}
usethis::use_git_ignore() # adds a .gitignore file
usethis::use_readme_md() # adds a README.md file
usethis::use_mit_license("Your Name") # adds an MIT license
usethis::create_package("path/to/your/package") # creating R package structure
# if already in the package folder, you may use usethis::create_package(getwd())
```

## Maintaining R Packages

The followings are other useful functionalities that `use_this` offers:

```{r}
usethis::use_package("dplyr") # addin package dependencies
usethis::use_r("script_name") # creating a new R script in R folder
usethis::use_data_raw() # to create a data-raw and add a DATASET.R to it.
# the DATASET.R can be used to add help file to the package.
```

The functions may also create and update other files like `.Rbuildignore`, which could mask some of details from those who are new to developing packages in R.

## Syncing to an Existing Github[^2]

[^2]: [Sync GitHub repository with existing R project](https://hansenjohnson.org/post/sync-github-repository-with-existing-r-project/)

If you did not start with a locally cloned repository, follow these steps from the project folder to sync your local git to an exising repository:

```{sh}
# initiate the upstream tracking of the project on the GitHub repo
git remote add origin https://github.com/hansenjohnson/website.git

# pull all files from the GitHub repo (typically just readme, license, gitignore)
git pull origin master
# Note that this may not work if you have changes that are not committed. See below for workarounds

# set up GitHub repo to track changes on local machine
git push -u origin master



### To untrack a folder (like public) which was committed to be tracked:
git rm -r --cached public
```


## Stage and Unstage Files
To stage (add files to be committed):

```{sh}
# adding the X.Y file
git add X.Y

# adding all files
git add .
```

To unstage:
```{sh}
# unstaging the X.Y file
git reset HEAD X.Y

# unstaging all files
git reset HEAD .
# or
git reset HEAD .

```

To discard all changes:
```{sh}
git checkout .
```

## Commit and Uncommit Files
To commit the staged files:

```{sh}
git commit -m "Commit description"
```

To uncommit but leave the last committed files with staged files:
```{sh}
git reset --soft HEAD~1
```

To uncommit and unstage the file at the same time:
```{sh}
git reset HEAD~1
```

The above is equivalent to:
```{sh}
git reset --soft HEAD~1
git reset HEAD .
```

> `git reset --hard HEAD~1` uncommits, unstages, and undone all the changes in files included in the last commit.

> `git restore --staged X.Y` and `git restore X.Y` operate like `git reset --soft HEAD~1` and `git reset HEAD~1` but at a file level.

